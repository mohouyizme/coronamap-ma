{"version":3,"sources":["Statistics.js","App.js","serviceWorker.js","index.js"],"names":["Statistics","cityStats","React","createElement","id","className","listItems","this","props","cities","heightOfItems","drawerClasses","window","innerWidth","show","class","onClick","click","style","outline","caseconfirmed","xmlns","width","height","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","d","cx","cy","r","data","deaths","enableBackground","recovered","lastUpdate","color","href","Component","App","state","drawerOpen","drawerToggleClickHandler","setState","backdropClickHandler","drawerClassName","zIndex","position","top","right","backgroundColor","border","cursor","points","Map","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","ImageOverlay","bounds","url","markers","target","rel","Boolean","location","hostname","match","locations","map","CircleMarker","radius","count","Popup","name","totalCases","cityCases","index","forEach","element","push","content","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f68f518.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactLists from \"react-scrollable-list\";\nimport \"./App.css\";\nimport data from \"./data.json\";\n\nclass Statistics extends React.Component {\n  render() {\n    const cityStats = React.createElement(\n      \"div\",\n      { id: \"cities-drawer\", className: \"card\" },\n      <ReactLists listItems={this.props.cities} heightOfItems={10} />\n    );\n\n    let drawerClasses = \"side-drawer\";\n\n    if (window.innerWidth >= 1210 || this.props.show) {\n      drawerClasses = \"side-drawer open\";\n    }\n\n    return (\n      <div className={drawerClasses}>\n        <button\n          class=\"close-button\"\n          onClick={this.props.click}\n          style={{ outline: \"none\" }}\n        >\n          ×\n        </button>\n        <div class=\"row-eq-height row\">\n          <div class=\"col-sm-12 col-md-4\">\n            <div class=\"gradient-blackberry card\">\n              <div class=\"px-3 py-3 card-body\">\n                <div class=\"media\">\n                  <div class=\"white media-body\">\n                    <h3 class=\"mb-1\">{this.props.caseconfirmed}</h3>\n                    <span>Total confirmé</span>\n                  </div>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"56\"\n                    height=\"56\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"#fff\"\n                    stroke-width=\"1.3\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  >\n                    <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n                    <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n                  </svg>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-sm-12 col-md-4\">\n            <div class=\"gradient-ibiza-sunset card\">\n              <div class=\"px-3 py-3 card-body\">\n                <div class=\"media\">\n                  <div class=\"white media-body\">\n                    <h3 class=\"mb-1\">{data.deaths}</h3>\n                    <span>Total décès</span>\n                  </div>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 512 512\"\n                    style={{ enableBackground: \"new 0 0 512 512\" }}\n                    width=\"56px\"\n                    height=\"56px\"\n                    fill=\"#ffffff\"\n                    stroke=\"#ffffff\"\n                    stroke-width=\"8\"\n                  >\n                    <g id=\"IconsRepo_bgCarrier\" />\n                    <path d=\"M502.154,181.778H384c-4.026,0-7.646,2.644-9.142,6.382l-27.714,69.383l-22.474-97.334 c-1.035-4.489-5.012-7.62-9.65-7.608c-4.606,0.026-8.578,3.255-9.563,7.754l-55.187,252.293l-33.694-379.05 c-0.398-4.471-3.767-8.105-8.192-8.84c-4.432-0.729-8.791,1.422-10.613,5.522L121.601,201.47H9.846 c-5.437,0-9.846,4.409-9.846,9.846c0,5.438,4.409,9.846,9.846,9.846H128c3.891,0,7.417-2.098,8.998-5.654l63.33-142.397 l36.018,405.26c0.43,4.844,4.332,8.671,9.184,8.98c0.212,0.013,0.421,0.031,0.63,0.031c4.595,0,8.619-3.192,9.613-7.736 l59.561-272.278l19.688,85.315c0.967,4.193,4.547,7.273,8.838,7.603c4.313,0.334,8.299-2.357,9.898-6.353l36.909-92.464h111.488 c5.438,0,9.846-4.409,9.846-9.846C512,186.187,507.591,181.778,502.154,181.778z\" />\n                  </svg>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-sm-12 col-md-4\">\n            <div class=\"gradient-green-teal card\">\n              <div class=\"px-3 py-3 card-body\">\n                <div class=\"media\">\n                  <div class=\"white media-body\">\n                    <h3 class=\"mb-1\">{data.recovered}</h3>\n                    <span>Total guéri</span>\n                  </div>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"56\"\n                    height=\"56\"\n                    viewBox=\"0 0 56 56\"\n                    fill=\"#ffffff\"\n                  >\n                    <path d=\"M 12 3.0449219 L 5 6.0449219 L 5 6 L 3 6 L 3 44 L 5 44 L 12 47 L 14 47 L 14 44 L 19.884766 44 L 19.685547 42 L 14 42 L 14 8 L 26 8 L 26 9 C 26.702 9 27.373 9.1266094 28 9.3496094 L 28 6 L 14 6 L 14 3.0449219 L 12 3.0449219 z M 12 5.2207031 L 12 44.824219 L 5 41.824219 L 5 8.2207031 L 12 5.2207031 z M 36 8 C 34.354937 8 33 9.3549372 33 11 L 33 19 C 33 20.645063 34.354937 22 36 22 L 44 22 C 45.645063 22 47 20.645063 47 19 L 47 11 C 47 9.3549372 45.645063 8 44 8 L 36 8 z M 36 10 L 44 10 C 44.562937 10 45 10.437063 45 11 L 45 19 C 45 19.562937 44.562937 20 44 20 L 36 20 C 35.437063 20 35 19.562937 35 19 L 35 11 C 35 10.437063 35.437063 10 36 10 z M 26 11 C 23.802706 11 22 12.802706 22 15 C 22 17.197294 23.802706 19 26 19 C 28.197294 19 30 17.197294 30 15 C 30 12.802706 28.197294 11 26 11 z M 39 12 L 39 14 L 37 14 L 37 16 L 39 16 L 39 18 L 41 18 L 41 16 L 43 16 L 43 14 L 41 14 L 41 12 L 39 12 z M 26 13 C 27.116414 13 28 13.883586 28 15 C 28 16.116414 27.116414 17 26 17 C 24.883586 17 24 16.116414 24 15 C 24 13.883586 24.883586 13 26 13 z M 26 20 C 22.0825 20 19 23.494797 19 27.544922 L 19 34.617188 L 21.060547 35.648438 L 22.095703 46 L 29.904297 46 L 30.939453 35.648438 L 33 34.617188 L 33 27.544922 C 33 23.494797 29.9175 20 26 20 z M 26 22 C 28.7105 22 31 24.505046 31 27.544922 L 31 33.382812 L 29.060547 34.351562 L 28.095703 44 L 23.904297 44 L 22.939453 34.351562 L 21 33.382812 L 21 27.544922 C 21 24.505046 23.2895 22 26 22 z M 10 25 A 1 1 0 0 0 9 26 A 1 1 0 0 0 10 27 A 1 1 0 0 0 11 26 A 1 1 0 0 0 10 25 z\" />\n                  </svg>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <span>Dernière mise à jour: {data.lastUpdate}</span>\n        </div>\n        {cityStats}\n        <div class=\"gradient-ibiza-sunset card\">\n          <div class=\"px-3 py-3 card-body\">\n            <div class=\"media\">\n              <div class=\"white media-body\">\n                <span>\n                  Numero d'urgence —{\" \"}\n                  <a style={{ color: \"#fff\" }} href=\"tel://0801004747\">\n                    080 100 4747\n                  </a>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Statistics;\n","import React from \"react\";\nimport { Map, ImageOverlay } from \"react-leaflet\";\nimport Statistics from \"./Statistics\";\n\nclass App extends React.Component {\n  state = { drawerOpen: false };\n\n  drawerToggleClickHandler = () => {\n    this.setState({\n      drawerOpen: !this.state.drawerOpen\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({\n      drawerOpen: false\n    });\n  };\n\n  render() {\n    let drawerClassName = \"customizer-toggle bg-danger\";\n    if (this.state.drawerOpen) {\n      drawerClassName = \"customizer-toggle bg-danger activated\";\n    }\n    return (\n      <div>\n        <button\n          id=\"drawer\"\n          className={drawerClassName}\n          onClick={this.drawerToggleClickHandler}\n          style={{\n            zIndex: \"3000\",\n            width: \"54px\",\n            height: \"74px\",\n            position: \"absolute\",\n            top: \"35%\",\n            right: \"0%\",\n            backgroundColor: \"transparent\",\n            border: \"none\",\n            cursor: \"pointer\",\n            outline: \"none\"\n          }}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"30px\"\n            height=\"76px\"\n            viewBox=\"0 0 50 80\"\n          >\n            <polyline\n              fill=\"none\"\n              stroke=\"#FFFFFF\"\n              stroke-width=\"1\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              points=\"45.63,75.8 0.375,38.087 45.63,0.375 \"\n            />\n          </svg>\n        </button>\n        <Statistics\n          show={this.state.drawerOpen}\n          click={this.backdropClickHandler}\n          caseconfirmed={this.props.caseconfirmed}\n          cities={this.props.cities}\n        />\n        <Map\n          center={[29, -5]}\n          zoom={6}\n          maxZoom={10}\n          attributionControl={true}\n          zoomControl={true}\n          doubleClickZoom={true}\n          scrollWheelZoom={true}\n          dragging={true}\n          animate={true}\n          easeLinearity={0.35}\n        >\n          <ImageOverlay\n            bounds={[\n              [35.9485, -0.9984],\n              [20.7664, -17.0994]\n            ]}\n            url=\"/coronamap-ma/morocco.svg\"\n          ></ImageOverlay>\n          {this.props.markers}\n        </Map>\n        <a\n          href=\"https://github.com/mehdibo/coronamap-ma\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          View source on GitHub\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Popup, CircleMarker } from \"react-leaflet\";\nimport data from \"./data.json\";\n\nconst markers = data.locations.map(location => (\n  <CircleMarker center={location.position} color=\"red\" radius={location.count}>\n    <Popup>\n      {location.name}: {location.count}\n    </Popup>\n  </CircleMarker>\n));\n\nlet totalCases = 0;\nlet cityCases = [];\nlet index = 0;\n\ndata.locations.forEach(element => {\n  totalCases += element.count;\n  cityCases.push({ id: index, content: element.name + \": \" + element.count });\n  index++;\n});\n\nReactDOM.render(\n  <App markers={markers} caseconfirmed={totalCases} cities={cityCases} />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}