{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Alert","style","zIndex","position","bottom","margin","fontSize","fontWeight","color","backgroundColor","severity","this","props","statistics","Map","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","ImageOverlay","bounds","url","markers","href","target","rel","React","Component","Boolean","window","location","hostname","match","data","locations","map","CircleMarker","radius","count","Popup","name","totalCases","cityCases","index","forEach","element","push","id","content","cityStats","createElement","listItems","heightOfItems","deaths","recovered","lastUpdate","undefined","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yyCA0DeA,E,iLApDX,OACE,6BACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,OAAQ,MACRC,SAAU,WACVC,OAAQ,EACRC,OAAQ,GACRC,SAAU,GACVC,WAAY,OACZC,MAAO,UACPC,gBAAiB,WAEnBC,SAAS,IAXX,sCAeCC,KAAKC,MAAMC,WACZ,kBAACC,EAAA,EAAD,CACEC,OAAQ,CAAC,IAAK,GACdC,KAAM,EACNC,QAAS,GACTC,oBAAoB,EACpBC,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,SAAS,EACTC,cAAe,KAGf,kBAACC,EAAA,EAAD,CACEC,OAAQ,CACN,CAAC,SAAU,OACX,CAAC,SAAU,UAEbC,IAAI,8BAELhB,KAAKC,MAAMgB,SAEd,uBACEC,KAAK,0CACLC,OAAO,SACPC,IAAI,uBAHN,8B,GA1CUC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCTAV,EAAUW,EAAKC,UAAUC,KAAI,SAAAL,GAAQ,OACzC,kBAACM,EAAA,EAAD,CAAc3B,OAAQqB,EAASjC,SAAUK,MAAM,MAAMmC,OAAQP,EAASQ,OACpE,kBAACC,EAAA,EAAD,KACGT,EAASU,KADZ,KACoBV,EAASQ,WAK7BG,EAAa,EACbC,EAAY,GACZC,EAAQ,EAEZV,EAAKC,UAAUU,SAAQ,SAAAC,GACrBJ,GAAcI,EAAQP,MACtBI,EAAUI,KAAK,CAAEC,GAAIJ,EAAOK,QAASH,EAAQL,KAAO,KAAOK,EAAQP,QACnEK,OAGF,IAAMM,EAAYvB,IAAMwB,cACtB,MACA,CAAEH,GAAI,UACN,kBAAC,IAAD,CACEI,UAAWT,EACXU,cAAe,GAEfzD,MAAO,MAILY,EAAamB,IAAMwB,cAAc,MAAO,CAAEH,GAAI,cAAgB,CAClErB,IAAMwB,cAAc,MAAO,CAAEH,GAAI,cAAgB,CAC/CrB,IAAMwB,cACJ,KACA,CAAEvD,MAAO,CAAE,aAAc,WACzB,qBAEF+B,IAAMwB,cACJ,KACA,CAAEvD,MAAO,CAAE,aAAc,WACzB8C,GAEFf,IAAMwB,cACJ,KACA,CACEvD,MAAO,CAAE,aAAc,WAEzB,qBAEF+B,IAAMwB,cACJ,KACA,CAAEvD,MAAO,CAAE,aAAc,WACzBsC,EAAKoB,QAEP3B,IAAMwB,cACJ,KACA,CAAEvD,MAAO,CAAE,aAAc,WACzB,kBAEF+B,IAAMwB,cACJ,KACA,CAAEvD,MAAO,CAAE,aAAc,WACzBsC,EAAKqB,WAEP5B,IAAMwB,cACJ,QACA,CAAEvD,MAAO,CAAE,aAAc,WACzB,gCAA4BsC,EAAKsB,cAGrC7B,IAAMwB,cAAc,KAAM,QAAIM,GAC9BP,IAGFQ,IAASC,OACP,kBAAC,EAAD,CAAKpC,QAASA,EAASf,WAAYA,IACnCoD,SAASC,eAAe,SD+CpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5669759.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, TileLayer, ImageOverlay } from \"react-leaflet\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Alert\n          style={{\n            zIndex: 99999,\n            position: \"absolute\",\n            bottom: 0,\n            margin: 10,\n            fontSize: 20,\n            fontWeight: \"bold\",\n            color: \"#ecf0f1\",\n            backgroundColor: \"#e74c3c\"\n          }}\n          severity=\"\"\n        >\n          Numero d'urgence â€” 0801004747\n        </Alert>\n        {this.props.statistics}\n        <Map\n          center={[29, -6]}\n          zoom={6}\n          maxZoom={10}\n          attributionControl={true}\n          zoomControl={true}\n          doubleClickZoom={true}\n          scrollWheelZoom={true}\n          dragging={true}\n          animate={true}\n          easeLinearity={0.35}\n        >\n          {/* <TileLayer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" /> */}\n          <ImageOverlay\n            bounds={[\n              [35.9485, -0.9984],\n              [20.7664, -17.0994]\n            ]}\n            url=\"/coronamap-ma/morocco.svg\"\n          ></ImageOverlay>\n          {this.props.markers}\n        </Map>\n        <a\n          href=\"https://github.com/mehdibo/coronamap-ma\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          View source on GitHub\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactLists from \"react-scrollable-list\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Popup, CircleMarker } from \"react-leaflet\";\nimport data from \"./data.json\";\n\nconst markers = data.locations.map(location => (\n  <CircleMarker center={location.position} color=\"red\" radius={location.count}>\n    <Popup>\n      {location.name}: {location.count}\n    </Popup>\n  </CircleMarker>\n));\n\nlet totalCases = 0;\nlet cityCases = [];\nlet index = 0;\n\ndata.locations.forEach(element => {\n  totalCases += element.count;\n  cityCases.push({ id: index, content: element.name + \": \" + element.count });\n  index++;\n});\n\nconst cityStats = React.createElement(\n  \"div\",\n  { id: \"cities\" },\n  <ReactLists\n    listItems={cityCases}\n    heightOfItems={10}\n    // maxItemsToRender={11}\n    style={{}}\n  />\n);\n\nconst statistics = React.createElement(\"div\", { id: \"statistics\" }, [\n  React.createElement(\"div\", { id: \"totalcases\" }, [\n    React.createElement(\n      \"h4\",\n      { style: { \"text-align\": \"center\" } },\n      \"Total confirmÃ©\"\n    ),\n    React.createElement(\n      \"h2\",\n      { style: { \"text-align\": \"center\" } },\n      totalCases\n    ),\n    React.createElement(\n      \"h4\",\n      {\n        style: { \"text-align\": \"center\" }\n      },\n      \"Total dÃ©cÃ¨s\"\n    ),\n    React.createElement(\n      \"h2\",\n      { style: { \"text-align\": \"center\" } },\n      data.deaths\n    ),\n    React.createElement(\n      \"h4\",\n      { style: { \"text-align\": \"center\" } },\n      \"Total guÃ©ri\"\n    ),\n    React.createElement(\n      \"h2\",\n      { style: { \"text-align\": \"center\" } },\n      data.recovered\n    ),\n    React.createElement(\n      \"small\",\n      { style: { \"text-align\": \"center\" } },\n      \"DerniÃ¨re mise Ã  jour:\\n\" + data.lastUpdate\n    )\n  ]),\n  React.createElement(\"br\", {}, undefined),\n  cityStats\n]);\n\nReactDOM.render(\n  <App markers={markers} statistics={statistics} />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}